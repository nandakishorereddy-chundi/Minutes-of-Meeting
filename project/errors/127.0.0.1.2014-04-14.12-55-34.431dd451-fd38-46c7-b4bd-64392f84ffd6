(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'na.'"
p3
sS'layer'
p4
S'/home/nanda/Desktop/web2py/applications/project/controllers/meet.py'
p5
sS'code'
p6
S'import os\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@auth.requires_login()\ndef mycal():\n    rows=db(db.t_appointment.created_by==auth.user.id).select()\n    return dict(rows=rows)\n\ndef index():\n\treturn dict()\n\n@auth.requires_login()\n\ndef first():\n    form = SQLFORM.factory(Field(\'meeting_name\',requires=IS_NOT_EMPTY()))\n    if form.process().accepted:\n        name = form.vars.meeting_name\n\tif name not in DB.tables:\n\t    DB.define_table(name,Field(\'body\',\'text\'),\n\t\t\t    Field(\'user_name\',\'string\'),migrate=True)#,format=lambda r: r.name or \'anonymous\')\n\t    DB.define_table(name+\'_\'+\'names\',Field(\'user_name\',\'string\'),migrate=True)#,format=lambda r: r.name or \'anonymous\')\n\t    DB.define_table(name+\'_\'+\'users\',Field(\'user_name\',\'string\'),migrate=True)\t\n\tredirect(URL(\'fourth\',vars=dict(name=name)))\n    return dict(form = form)\n\ndef second():\n     name = request.vars.name or redirect(URL(\'first\'))\n     tb = DB[name]\n     txt = DB().select(tb.ALL ,orderby=tb.id)\n     redirect(URL(\'fourth\',vars=dict(name=name)))\n\n\ndef fourth():\n    name = request.vars.name\n    tb = DB[name]\n    tb1 = DB[name+\'_\'+\'names\']\n    text = DB().select(tb.ALL ,orderby=tb.id)\n    names = DB().select(tb1.ALL,orderby=tb1.id)\n    return dict(text = text,name=name,names=names)\n\n\ndef startmeeting():\n    name = request.vars.name\n    tb = DB[name]\n    tb1 = DB[name+\'_\'+\'names\']\n    text = DB().select(tb.ALL ,orderby=tb.id)\n    names = DB().select(tb1.ALL,orderby=tb1.id)\n    return dict(text = text,name=name,names=names)\n\n\ndef fileupload():\n\tform = SQLFORM.factory(Field(\'file\',\'upload\',uploadfolder=os.path.join(request.folder,\'uploads\')),Field(\'user_name\',requires=IS_NOT_EMPTY()))\n \tif form.vars.file and form.process().accepted:\n            response.flash = T("Ur file is uploaded!")\n\treturn dict(form=form)\n\ndef sixth():\n    name = request.get_vars[\'start\'].split(\'/\')\n    tb = DB[name[0]]\n    j = tb(int(name[1])) or redirect(URL(\'fourth\'))\n    return dict(name=j)\n\ndef seventh():\n    name = request.get_vars[\'start\'].split(\'/\')\n    tb = DB[name[0]]\n    tb.insert(body=name[1],user_name=name[2])\n    text = DB().select(tb.ALL ,orderby=tb.id)\n    name = name[0]\n    return dict(text=text,name=name)\n\ndef eight():\n    name = request.get_vars[\'start\'].split(\'/\')\n    tb = DB[name[0]]\n    txt = DB().select(tb.ALL ,orderby=tb.id)\n    return dict(text=txt,name=name[1])\n\ndef ninth():\n  \tprint "((((())))"\n  \tuser=request.args(0)\n  \tprint user\n  \ttable_name=request.args[1]+\'_names\'\n \tprint table_name\n\ttable=DB[table_name]\n\tif user not in DB.tables:\t\n\t\ttable.insert(user_name=user)\n \tresponse.flash=T("user added to the meeting")\t\n  \treturn dict() \n\n@auth.requires_login()\ndef tenth():\n\tuser=\'%(first_name)s\'%auth.user\n        print user\n\tform = SQLFORM.factory(Field(\'meeting\',requires=IS_NOT_EMPTY()))\n\tif form.process().accepted:\n\t\tname=form.vars.meeting\n\t\ttb=DB[name+\'_\'+\'users\']\n\t\ttb.insert(user_name=user)\n\t\tprint user+\'i am user\'\n\treturn dict(form=form)\n\ndef search():\n\treturn dict()\n\ndef adduser():\n\tmeeting_name=request.vars.meeting_name\t\n\tsession.meeting_name=meeting_name\n\tprint meeting_name\n\tmeeting_name=meeting_name+\'_users\'\n\ttb=DB[meeting_name]\n\ttext = DB().select(tb.ALL ,orderby=tb.id)\n\tsession.list=[]\n\tfor row in text:\n\t\tflag=0\n\t\tfor i in session.list:\n\t\t\tif i == row.user_name:\n\t\t\t\tflag=1\n\t\tif flag is 0:\n\t\t\tprint row.user_name\n\t\t\tsession.list.append(row.user_name)\n\treturn dict()\n\nresponse._vars=response._caller(startmeeting)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nanda/Desktop/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/nanda/Desktop/web2py/applications/project/controllers/meet.py", line 137, in <module>\n  File "/home/nanda/Desktop/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nanda/Desktop/web2py/applications/project/controllers/meet.py", line 59, in startmeeting\n    tb = DB[name]\n  File "/home/nanda/Desktop/web2py/gluon/dal.py", line 8322, in __getitem__\n    return self.__getattr__(str(key))\n  File "/home/nanda/Desktop/web2py/gluon/dal.py", line 8329, in __getattr__\n    return ogetattr(self, key)\nAttributeError: \'DAL\' object has no attribute \'na.\'\n'
p11
s.